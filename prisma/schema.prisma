generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  DOCTOR
  PATIENT
}

enum AppointmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

model User {
  id                    String           @id @unique @default(uuid())
  password              String
  email                 String           @unique
  name                  String
  role                  UserType         @default(PATIENT)
  specialization        String?
  date_of_birth         String?
  address               String?
  doctorAppointment     Appointment[]    @relation(name: "doctor")
  patientAppointment    Appointment[]    @relation(name: "patient")
  doctorPrescription    Prescription[]   @relation(name: "doctor")
  patientPrescription   Prescription[]   @relation(name: "patient")
  doctorMedicalHistory  MedicalHistory[] @relation(name: "doctor")
  patientMedicalHistory MedicalHistory[] @relation(name: "patient")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([createdAt])
  @@index([updatedAt])
}

model Appointment {
  id         String @id @unique @default(uuid())
  doctor_id  String
  patient_id String
  doctor     User   @relation("doctor", fields: [doctor_id], references: [id], onDelete: Cascade)
  patient    User   @relation("patient", fields: [patient_id], references: [id], onDelete: Cascade)

  reason        String
  date_and_time DateTime
  status        AppointmentStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([createdAt])
  @@index([updatedAt])
}

model Prescription {
  id         String @id @unique @default(uuid())
  doctor_id  String
  patient_id String
  doctor     User   @relation("doctor", fields: [doctor_id], references: [id], onDelete: Cascade)
  patient    User   @relation("patient", fields: [patient_id], references: [id], onDelete: Cascade)

  medication String
  dosage     String
  frequency  String
  startDate  DateTime @default(now())
  endDate    DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([createdAt])
  @@index([updatedAt])
}

model MedicalHistory {
  id         String @id @unique @default(uuid())
  doctor_id  String
  patient_id String
  doctor     User   @relation("doctor", fields: [doctor_id], references: [id], onDelete: Cascade)
  patient    User   @relation("patient", fields: [patient_id], references: [id], onDelete: Cascade)

  diagnosis String
  treatment String
  notes     String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([createdAt])
  @@index([updatedAt])
}
